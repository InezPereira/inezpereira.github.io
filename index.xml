<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Purkinje Delirium on Purkinje Delirium</title>
    <link>https://inespereira.com/</link>
    <description>Recent content in Purkinje Delirium on Purkinje Delirium</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Feb 2020 11:12:09 +0700</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Data Visualization</title>
      <link>https://inespereira.com/post/data-visualization/</link>
      <pubDate>Fri, 07 Feb 2020 11:12:09 +0700</pubDate>
      
      <guid>https://inespereira.com/post/data-visualization/</guid>
      <description>

&lt;p&gt;Scientists are expected to be effective communicators, but that can be a little
tricky without a few conscious tricks up your sleeve.&lt;/p&gt;

&lt;p&gt;Visualization, in particular, can be a very powerful means of conveying information,
be it in your papers, posters, presentations, chapters, or blogposts.&lt;/p&gt;

&lt;p&gt;üñç &lt;em&gt;Nota bene&lt;/em&gt;: In this post, I summarize a few recommendations from various sources
that I, personally, found very useful.
For a more in-depth take on the following and other points, do consult the series
of Points of View columns published in &lt;em&gt;Nature Methods&lt;/em&gt;.
A collection of these can be found &lt;a href=&#34;https://www.scientificamerican.com/products/nature-products/nature-collections-visual-strategies-for-biological-data/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
Another great online read can be found &lt;a href=&#34;https://www.knowablemagazine.org/article/mind/2019/science-data-visualization&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please note that all of these recommendations
are meant to be general and that one should always take into account any
field-specific conventions.&lt;/p&gt;

&lt;h2 id=&#34;color&#34;&gt;Color&lt;/h2&gt;

&lt;p&gt;There are a few things to know about color.&lt;/p&gt;

&lt;p&gt;First, color varies in terms of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hue: &amp;ldquo;&lt;em&gt;the attribute we use to classify a color as red or yellow.&lt;/em&gt;&amp;rdquo; [1]&lt;/li&gt;
&lt;li&gt;Saturation: which &amp;ldquo;&lt;em&gt;describes the neutrality of a color; a red object with
little or no white is said to be very saturated.&lt;/em&gt;&amp;rdquo; [1]&lt;/li&gt;
&lt;li&gt;Lightness: which &amp;ldquo;&lt;em&gt;tells us about its relative ordering on the dark-to-light scale.&lt;/em&gt;&amp;rdquo; [1]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Figure 1 shows a way to represent these dimensions:&lt;/p&gt;

&lt;p&gt;&lt;img title=&#34;&#34; src=&#34;color-on-mac.png&#34;/&gt;
&lt;div style=&#34;text-align: center&#34;&gt;Figure 1: Picking colors.&lt;/div&gt;&lt;/p&gt;

&lt;!-- If you use these dimensions to represent color, then you end up with a three dimensional
object; for instance, a sphere: --&gt;

&lt;!-- &lt;img title=&#34;&#34; src=&#34;color-sphere.png&#34; alt=&#34;&#34; width=&#34;406&#34; height=&#34;357&#34; /&gt;
&lt;div style=&#34;text-align: center&#34;&gt;Figure 1: HSL (hue, saturation, lightness) color solid.&lt;/div&gt; --&gt;

&lt;p&gt;Now, when picking colors, these should ideally be discernible in grayscale as well.
That way, if someone prints your figure in black and white, they still get the message üòä.
One way to do this is to spiral around the color wheel while varying lightness as well.
This only works effectively for a limited number of colors: around 6 to 8 [1].
Past 8, it just becomes harder to find discernible colors.&lt;/p&gt;

&lt;p&gt;As for representing data, color is ill-suited to represent &lt;strong&gt;quantitative data&lt;/strong&gt;, because it is not in principle
clear how to order different colors. It is, however, appropriate to characterize &lt;strong&gt;categorical&lt;/strong&gt; data.&lt;/p&gt;

&lt;p&gt;While color might make a figure seem nicer, it should be used judiciously.
Indeed, there are better strategies to compare elements, and these were ranked by
Cleveland and McGill [2]:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Rank&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Aspect compared&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Position along common scale &lt;img src=&#34;aligned.png&#34; style=&#34;float: right; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Position on the same, but non-aligned scales &lt;img src=&#34;non-aligned.png&#34; style=&#34;float: right; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Length &lt;img src=&#34;length.png&#34; style=&#34;float: right; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Angle  &lt;img src=&#34;angle.png&#34; style=&#34;float: right; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Area &lt;img src=&#34;area.png&#34; style=&#34;float: right; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Volume  &lt;img src=&#34;volume.png&#34; style=&#34;float: right; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Color saturation &lt;img src=&#34;saturation.png&#34; style=&#34;float: right; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Color hue &lt;img src=&#34;hue.png&#34; style=&#34;float: right; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This made me realize that bar charts are a very effective tool for comparison!&lt;/p&gt;

&lt;h2 id=&#34;a-word-on-color-blindness&#34;&gt;A word on color blindness&lt;/h2&gt;

&lt;p&gt;Given that certain forms of color blindness are quite common, this is something
that you should definitely take into account. Here is a list of colors from
Bang Wong, optimized for color-blind individuals [3]:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Color&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Color name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;RGB&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;black.png&#34; style=&#34;float: left; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Black&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0, 0, 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;orange.png&#34; style=&#34;float: left; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Orange&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;230, 159, 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;sky-blue.png&#34; style=&#34;float: left; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sky blue&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;86, 180, 233&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;blueish-green.png&#34; style=&#34;float: left; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Blueish green&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0, 158, 115&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;yellow.png&#34; style=&#34;float: left; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yellow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;240, 228, 66&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;blue.png&#34; style=&#34;float: left; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Blue&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0, 114, 178&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;vermillion.png&#34; style=&#34;float: left; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Vermillion&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;213, 94, 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;reddish-purple.png&#34; style=&#34;float: left; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Reddish purple&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;204, 121, 167&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;salience&#34;&gt;Salience&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve reviewed a few tricks of how to effectively compare elements, let&amp;rsquo;s
see how to create contrast, &lt;em&gt;i.e.&lt;/em&gt; visually separate one part of an image from the rest.
Salience, the visual quality of an object that makes it more prominent, can be
achieved in several ways [1]:&lt;/p&gt;

&lt;p&gt;&lt;img title=&#34;&#34; src=&#34;salience.png&#34;/&gt;
&lt;div style=&#34;text-align: center&#34;&gt;Figure 2: Achieving salience.&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;A few notes on this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sometimes, it might make sense to have multiple views of the same graph, in order to
emphasize one thing at a time.&lt;/li&gt;
&lt;li&gt;Make sure the most salient aspect of the figure is also the most relevant!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gestalt-principles&#34;&gt;Gestalt principles&lt;/h2&gt;

&lt;p&gt;The Gestalt principles of perception are a set of principles which attempt
to explain why humans naturally perceive objects as being organized or grouped [5].
There are several principles [4-5]:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Principle&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Remarks&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Similarity&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Similar objects are grouped together &lt;img src=&#34;similarity.png&#34; style=&#34;float: right; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Proximity&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Grouping based on distance (do you see 2 rows?) &lt;img src=&#34;proximity.png&#34; style=&#34;float: right; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Connection&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Lines create a clear connection and groups &lt;img src=&#34;connection.png&#34; style=&#34;float: right; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Enclosure&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Enclosure can overcome the other principles. &lt;img src=&#34;enclosure.png&#34; style=&#34;float: right; margin-right: 10px;&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Notice how you can use enclosure to bring the reader&amp;rsquo;s attention to different parts of a graph
or table!&lt;/p&gt;

&lt;h2 id=&#34;layout&#34;&gt;Layout&lt;/h2&gt;

&lt;p&gt;A layout has both an aesthetic and clarifying purpose. A simple way to organize your
slides/posters is to follow the &amp;ldquo;rule of thirds&amp;rdquo; [6].&lt;/p&gt;

&lt;p&gt;&lt;img title=&#34;&#34; src=&#34;powerpoints.png&#34;/&gt;
&lt;div style=&#34;text-align: center&#34;&gt;Figure 3: Power points.&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Basically, you can start by dividing the page into 9 equal parts. Objects placed
along the lines and especially at their intersection points (the so-called power
points) become more prominent. You can use this to guide the observer.&lt;/p&gt;

&lt;h2 id=&#34;other&#34;&gt;Other&lt;/h2&gt;

&lt;p&gt;The above principles should already help a fair amount, but here are few other
tips:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Negative space (or whitespace): use it to structure your visualization and
to let it breathe (no one likes crammed posters&amp;hellip;). For more on this, see [7].&lt;/li&gt;
&lt;li&gt;Typography: favor sans serif fonts for slides and serif fonts for greater
lengths of text (&lt;em&gt;e.g.&lt;/em&gt; posters, papers) [8].&lt;/li&gt;
&lt;li&gt;Overview figures: these can be very helpful! However, keep them simple and
avoid entering graphs or results at this point [9].&lt;/li&gt;
&lt;li&gt;üß® Pie charts: while pie charts can be useful in describing parts of a whole
and are standard practise in some fields, they have been criticized. Edward Tufte
once wrote &lt;em&gt;&amp;ldquo;the only design worse than a pie chart is several of them&amp;rdquo;&lt;/em&gt; [10]. To
compare elements, pie charts rely on differences in area or angle, and we have
previously seen that there are more effective means of comparison. Hence,
a bar chart can often be a more effective alternative.
If you do opt for a pie chart, you might want to know that a specific ordering of
slices is sometimes recommended. Specifically, Bang Wong writes: &lt;em&gt;&amp;ldquo;place the largest
wedge to the right of 12 o‚Äôclock, the second largest to the left of 12 o‚Äôclock
and the remainder counter-clockwise descending in size&amp;rdquo;&lt;/em&gt; [11]. Graphically:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img title=&#34;&#34; src=&#34;pie-chart.png&#34;/&gt;
&lt;div style=&#34;text-align: center&#34;&gt;Figure 4: Organizing a pie chart.&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;[1] &lt;a href=&#34;https://www.nature.com/articles/nmeth0810-573&#34; target=&#34;_blank&#34;&gt;B. Wong, &amp;ldquo;Color coding&amp;rdquo;, &lt;em&gt;Nature Methods&lt;/em&gt;, 7:573, 2010.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] &lt;a href=&#34;https://science.sciencemag.org/content/229/4716/828&#34; target=&#34;_blank&#34;&gt;W. S. Cleveland, R. McGill, &amp;ldquo;Graphical Perception and Graphical Methods
for Analyzing Scientific Data&amp;rdquo;, &lt;em&gt;Science&lt;/em&gt;, 229(4716), 1985.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] &lt;a href=&#34;https://www.nature.com/articles/nmeth.1618&#34; target=&#34;_blank&#34;&gt;B. Wong, &amp;ldquo;Color blindness&amp;rdquo;, &lt;em&gt;Nature Methods&lt;/em&gt;, 8:441, 2011.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[4] &lt;a href=&#34;https://www.nature.com/articles/nmeth1110-863&#34; target=&#34;_blank&#34;&gt;B. Wong, &amp;ldquo;Gestalt principles (part 1)&amp;rdquo;, &lt;em&gt;Nature Methods&lt;/em&gt;, 7:863, 2010.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[5] &lt;a href=&#34;https://en.wikipedia.org/wiki/Principles_of_grouping&#34; target=&#34;_blank&#34;&gt;Principles of grouping, Wikipedia, [accessed on 10.02.2020]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[6] &lt;a href=&#34;https://www.nature.com/articles/nmeth.1711&#34; target=&#34;_blank&#34;&gt;B. Wong, &amp;ldquo;Layout&amp;rdquo;, &lt;em&gt;Nature Methods&lt;/em&gt;, 8:783, 2011.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[7] &lt;a href=&#34;https://www.nature.com/articles/nmeth0111-5&#34; target=&#34;_blank&#34;&gt;B. Wong, &amp;ldquo;Negative Space&amp;rdquo;, &lt;em&gt;Nature Methods&lt;/em&gt;, 8:5, 2011.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[8] &lt;a href=&#34;https://www.nature.com/articles/nmeth0411-277&#34; target=&#34;_blank&#34;&gt;B. Wong, &amp;ldquo;Typography&amp;rdquo;, &lt;em&gt;Nature Methods&lt;/em&gt;, 8:277, 2011.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[9] &lt;a href=&#34;https://www.nature.com/articles/nmeth0511-365&#34; target=&#34;_blank&#34;&gt;B. Wong, &amp;ldquo;The overview figure&amp;rdquo;, &lt;em&gt;Nature Methods&lt;/em&gt;, 8:365, 2011.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[10] &lt;a href=&#34;https://www.edwardtufte.com/tufte/books_vdqi&#34; target=&#34;_blank&#34;&gt;E. Tufte, &lt;em&gt;The Visual Display of Quantitative Information&lt;/em&gt;, 2nd edition, Graphics Press, 2001.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[11] &lt;a href=&#34;https://www.nature.com/articles/nmeth0311-189&#34; target=&#34;_blank&#34;&gt;B. Wang, Points of review (part 2), &lt;em&gt;Nature Methods&lt;/em&gt;, 8:189, 2011.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A beginner&#39;s guide to ETH&#39;s Euler</title>
      <link>https://inespereira.com/post/eth-euler/</link>
      <pubDate>Wed, 03 Jul 2019 15:21:13 +0200</pubDate>
      
      <guid>https://inespereira.com/post/eth-euler/</guid>
      <description>

&lt;p&gt;üñç &lt;em&gt;Nota bene&lt;/em&gt;: You will need to be an ETH member to use Euler. However, this
post might still be useful if you happen to be working on another cluster which
uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Platform_LSF&#34; target=&#34;_blank&#34;&gt;LSF&lt;/a&gt;  batch system. Also relevant: I am currently mainly using MATLAB to run my simulations, so you&amp;rsquo;ll find some MATLAB specific advice.
For Python specifics, check out &lt;a href=&#34;https://scicomp.ethz.ch/wiki/Python&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt;.
&lt;!-- Also note that [GPUs are only provided in the Leohnard cluster](https://scicomp.ethz.ch/wiki/Getting_started_with_GPUs)
and access is restricted to shareholders. --&gt;&lt;/p&gt;

&lt;p&gt;‚åõÔ∏è &lt;strong&gt;TL;DR&lt;/strong&gt;: check out the end of the blog post for a practical suggestion on how
to structure your job submission scripts.&lt;/p&gt;

&lt;h2 id=&#34;euler&#34;&gt;Euler ?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://scicomp.ethz.ch/w/images/a/ad/Getting_started_with_Euler_(September_2016).pdf&#34; target=&#34;_blank&#34;&gt;Euler&lt;/a&gt;
is the high performance computing cluster at ETH Zurich.
&lt;!-- Its name stands for *Erweiterbarer, Umweltfreundlicher, Leistungsf√§higer ETH Rechner*. --&gt;
Like its predecessors, Euler follows a shareholder model, and is for the most part financed by its users.
These &amp;ldquo;shareholders&amp;rdquo; then receive a share of the cluster&amp;rsquo;s resources (&lt;em&gt;i.e&lt;/em&gt; CPU time), which is proportional to their investment.
However, a small share of Euler is financed by the IT Services and is open to all ETH members.&lt;/p&gt;

&lt;p style=&#34;text-align: center;&#34;&gt;
And that&#39;s a huge hooray for students!
&lt;/p&gt;

&lt;p&gt;Euler is really a &lt;em&gt;great&lt;/em&gt; resource, but can be associated with a steep learning curve,
especially if you are not used to working with a terminal and all that jazz.&lt;/p&gt;

&lt;p&gt;In this post, we&amp;rsquo;ll go through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to run your first job&lt;/li&gt;
&lt;li&gt;Some advanced tricks&lt;/li&gt;
&lt;li&gt;A template for future jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-a-simple-job&#34;&gt;Running a simple job&lt;/h2&gt;

&lt;h3 id=&#34;connecting-to-euler&#34;&gt;Connecting to Euler&lt;/h3&gt;

&lt;p&gt;The first thing you need to do is to connect to Euler.
To do that, you either need to be within the ETH network or connected via VPN.
The only requirement to login is a valid NETHZ account (no forms to fill out üéâ).
Open a terminal and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh username@euler.ethz.ch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now type in your NETHZ password&amp;hellip; and you&amp;rsquo;re in!
If this is the first time you&amp;rsquo;re logging in, the only extra step is to accept the
cluster&amp;rsquo;s usage rights.&lt;/p&gt;

&lt;h3 id=&#34;file-transfer&#34;&gt;File transfer&lt;/h3&gt;

&lt;p&gt;To run your jobs, you&amp;rsquo;ll need to transfer your scripts and data to the cluster.
To do so, you can use the &lt;code&gt;scp&lt;/code&gt; command. The general use is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp [options] source destination
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- There are some difference between the two commands, but I&#39;ll let you read more
about [here](https://stackoverflow.com/questions/20244585/how-does-scp-differ-from-rsync)
and [here](https://superuser.com/questions/393608/difference-between-scp-and-rsync). --&gt;

&lt;!-- For now, let&#39;s focus on the `scp` command.  --&gt;

&lt;p&gt;Specifically, what you&amp;rsquo;ll need to type is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp file username@euler.ethz.ch:path/to/destination # from local computer to Euler
scp username@euler.ethz.ch:path/to/source/file path/to/destination # from Euler to local computer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To transfer directories, the option &lt;code&gt;-r&lt;/code&gt; needs to be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp -r directory username@euler.ethz.ch:path/to/destination # from local computer to Euler
scp -r username@euler.ethz.ch:path/to/source/directory path/to/destination # from Euler to local computer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll find that acquainting yourself with bash scripting will come in handy for
this type of commands. Check out the cheat sheet I left in the end of the blog post
for just that!&lt;/p&gt;

&lt;h3 id=&#34;a-word-on-data-storage&#34;&gt;A word on data storage&lt;/h3&gt;

&lt;p&gt;When it comes to personal storage, every user has access to two options:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;HOME=/cluster/home/username
SCRATCH=/cluster/scratch/username
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Home is a safe long-term storage for important data. Only &lt;em&gt;you&lt;/em&gt; can access it and
the content is saved every hour (snapshot) and every night (tape backup).
You are allowed 16 GB of data or a maximum of 100 000 files.
&lt;strong&gt;This is the directory (folder) you&amp;rsquo;ll automatically find yourself in once you login.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Scratch, on the other hand, is designed as a fast short-term storage. There is
&lt;em&gt;no&lt;/em&gt; backup and ETH will warn you that it is &lt;em&gt;purged on a regular basis&lt;/em&gt;. Your disk
quota in scratch rises to 2.5 TB and a maximum of 1 000 000 files.&lt;/p&gt;

&lt;p&gt;To check how far away (or how close&amp;hellip;) you are from your quota, use the command
&lt;code&gt;lquota&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lquota
+-----------------------------+-------------+------------------+------------------+------------------+
| Storage location:           | Quota type: | Used:            | Soft quota:      | Hard quota:      |
+-----------------------------+-------------+------------------+------------------+------------------+
| /cluster/home/user          | space       |          8.85 GB |         17.18 GB |         21.47 GB |
| /cluster/home/user          | files       |            25610 |            80000 |           100000 |
+-----------------------------+-------------+------------------+------------------+------------------+
| /cluster/shadow             | space       |          4.10 kB |          2.15 GB |          2.15 GB |
| /cluster/shadow             | files       |                2 |            50000 |            50000 |
+-----------------------------+-------------+------------------+------------------+------------------+
| /cluster/scratch/user       | space       |        237.57 kB |          2.50 TB |          2.70 TB |
| /cluster/scratch/user       | files       |               29 |          1000000 |          1500000 |
+-----------------------------+-------------+------------------+------------------+------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on data storage (&lt;em&gt;e.g.&lt;/em&gt; options for shareholders), be sure
to check out this &lt;a href=&#34;https://scicomp.ethz.ch/w/images/a/ad/Getting_started_with_Euler_(September_2016).pdf&#34; target=&#34;_blank&#34;&gt;presentation&lt;/a&gt;
or this &lt;a href=&#34;https://scicomp.ethz.ch/wiki/Storage_systems&#34; target=&#34;_blank&#34;&gt;page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;using-euler&#34;&gt;Using Euler&lt;/h3&gt;

&lt;p&gt;All right! Now we&amp;rsquo;re ready to start using the cluster!
And it all boils down to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bsub [LSF options] job
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, the tricky part is to figure out how to use the options and what
constitutes a job.
Well, here are a few options I find particularly useful (for more, check out
  &lt;a href=&#34;https://scicomp.ethz.ch/wiki/LSF_mini_reference&#34; target=&#34;_blank&#34;&gt;this reference&lt;/a&gt;):&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-W HH:MM&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Allowed duration for job. Default: 04:00 hours.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-R &amp;quot;rusage[mem=X]&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Memory (in MB per core) required. Default: X = 1024 MB.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-J jobname&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Assigns name to job. Not necessarily unique!&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-w &amp;quot;depcond&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sets dependencies between jobs. More on this below.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-r&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;If your node crashes, LSF will re-run the job on another node.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now mind you that a job can be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a Linux command: &lt;code&gt;bsub [LSF options] command&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a shell script: &lt;code&gt;bsub [LSF options] &amp;lt; script&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a program: &lt;code&gt;bsub [LSF options] path/to/program&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- So, as you can see, different types of jobs may imply a slightly different syntax. --&gt;

&lt;p&gt;Ok, so far so good. Now, to use MATLAB, you&amp;rsquo;ll first need to load it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;module load new matlab/R2018a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that I am loading a specific version of MATLAB. For more information on how to
configure the MATLAB version you want to run, check out &lt;a href=&#34;https://scicomp.ethz.ch/wiki/MATLAB&#34; target=&#34;_blank&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that&amp;rsquo;s done, let&amp;rsquo;s say you would like to fit a model using a script you wrote beforehand.
To submit your job, you then type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bsub -J &amp;quot;fitModel&amp;quot; matlab -singleCompThread -nodisplay -r &amp;quot;fit_model&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pardon? What are all &lt;em&gt;those&lt;/em&gt; options? It&amp;rsquo;s fairly easy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-singleCompThread&lt;/code&gt;: forces MATLAB to use only one thread for its computations
(prevents MATLAB from overloading the compute nodes).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-nodisplay&lt;/code&gt;: just explicitly tell MATLAB no graphical display is available.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚ö†Ô∏è &lt;strong&gt;#ProTip&lt;/strong&gt;: no &lt;code&gt;.m&lt;/code&gt; at the end of your script name (bsub doesn‚Äôt require that you pass the file extension).
That has once cost me an embarrassing amount of time.&lt;/p&gt;

&lt;p&gt;You have submitted your job and get back:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Generic job.
Job &amp;lt;94709747&amp;gt; is submitted to queue &amp;lt;normal.4h&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That looks good. To manage your jobs, you&amp;rsquo;ll then need two new commands:
&lt;code&gt;bjobs&lt;/code&gt; and &lt;code&gt;bkill&lt;/code&gt;, which let you monitor or kill all jobs or specific jobs
(for more details, read &lt;a href=&#34;https://scicomp.ethz.ch/wiki/LSF_mini_reference&#34; target=&#34;_blank&#34;&gt;this reference&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bjobs
&amp;gt; JOBID      USER   STAT  QUEUE      FROM_HOST   EXEC_HOST   JOB_NAME   SUBMIT_TIME
&amp;gt; 94709747   jdoe   RUN   normal.4h   euler01  eu-c7-106-0  fitModel   Jul  3 07:19

bkill 0 # terminate all jobs
&amp;gt; Job &amp;lt;94709747&amp;gt; is being terminated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An alternative to &lt;code&gt;bjobs&lt;/code&gt; is &lt;a href=&#34;https://scicomp.ethz.ch/wiki/Using_the_batch_system#bbjobs&#34; target=&#34;_blank&#34;&gt;bbjobs&lt;/a&gt;
(aka better bjobs).&lt;/p&gt;

&lt;h2 id=&#34;more-advanced-tricks&#34;&gt;More advanced tricks&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take things up a notch. Let&amp;rsquo;s say that you need to run jobs which somehow
depend on each other. The example I&amp;rsquo;ll use here is a greedy feature selection
algorithm. Don&amp;rsquo;t mind the details, the important thing is you need to do your
computations in three stages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run a setup function (e.g. restructure some folders)&lt;/li&gt;
&lt;li&gt;Train your models&lt;/li&gt;
&lt;li&gt;Choose the best model&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that means that you only want step 2 to kick in once the setup is ready.
That&amp;rsquo;s called &lt;a href=&#34;https://scicomp.ethz.ch/wiki/Job_chaining&#34; target=&#34;_blank&#34;&gt;job chaining&lt;/a&gt; and can
be done as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bsub -J job1 command1
bsub -J job2 -w &amp;quot;done(job1)&amp;quot; command2
bsub -J job3 -w &amp;quot;done(job2)&amp;quot; command3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note however that the condition for &lt;code&gt;job2&lt;/code&gt; is only fulfilled if &lt;code&gt;job1&lt;/code&gt; is
completed successfully. If, for some reason, &lt;code&gt;job1&lt;/code&gt; crashes or is killed because
it reached the runtime or memory limit, then the dependency for &lt;code&gt;job2&lt;/code&gt; is never
true and &lt;code&gt;job2&lt;/code&gt; will stand, pending, forever&amp;hellip;
If you actually, for some heartless reason, don&amp;rsquo;t really care what happens to
&lt;code&gt;job1&lt;/code&gt;, then you should write:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bsub -J job1 command1
bsub -J job2 -w &amp;quot;ended(job1)&amp;quot; command2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If step 2 involves a suite of models and you want to only start step 3
once &lt;em&gt;all&lt;/em&gt; models in step 2 are finished, then you might run into a problem.&lt;/p&gt;

&lt;p&gt;If you only have two models and don&amp;rsquo;t mind writing out all the dependencies, you
can opt for:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bsub -J job1 command1 # train model 1
bsub -J job2 command2 # train model 2
bsub -J job3 -w &amp;quot;done(job1) &amp;amp;&amp;amp; done(job2)&amp;quot; command3 # choose best model
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If, on the other hand, you are fitting a lot of models in step 2, you should
consider using &lt;a href=&#34;https://scicomp.ethz.ch/wiki/Job_arrays&#34; target=&#34;_blank&#34;&gt;job arrays&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bsub -J job[1-10] command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-J job[1-10]&lt;/code&gt; defines the name of the array and the number of jobs it
will contain (in this case: 10).
You then need to get the JOBID of this job array. This is
because the JOBID will be the same for the whole job array, but different subjobs
will have different names.
To get the JOBID, one way is to use &lt;code&gt;bjobs&lt;/code&gt; and just copy the JOBID (let&amp;rsquo;s say: 94709747).
Then, you can write:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bsub -w &amp;quot;numdone(94709747,*)&amp;quot; -J job2 command2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if you prefer (I would) to have the JOBID extracted automatically, then
this is what you want:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;JOBID=$(bsub command1 | awk &#39;/is submitted/{print substr($2, 2, length($2)-2);}&#39;)
if [ -n &amp;quot;$JOBID&amp;quot; ]; then
        bsub -w &amp;quot;numdone($JOBID,*)&amp;quot; command2
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line of code will run the job it contains &lt;em&gt;and&lt;/em&gt; extract the job&amp;rsquo;s ID.
Filling two needs with one deed üí™.
Oh wait, but what if I need to pass the array index as an argument to a function?
That can also be done! You can pass &lt;code&gt;$LSB_JOBINDEX&lt;/code&gt; as a command-line argument.
Note the backslash &lt;code&gt;\&lt;/code&gt; before &lt;code&gt;$LSB_JOBINDEX&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bsub -J &amp;quot;job[1-10]&amp;quot; matlab -nodisplay -singleCompThread -r &amp;quot;my_function(\$LSB_JOBINDEX)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;üí£ Ok, now an even harder thing to do would be to set a dependency on multiple
job arrays. That can also be done, with a few bash tricks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dep_cond=&amp;quot;&amp;quot; # create a variable to store the full dependency
for i in {1..50}; do
  JOBID=$(bsub -J &amp;quot;job$i[1-10]&amp;quot; matlab -nodisplay -singleCompThread -r &amp;quot;my_function(\$LSB_JOBINDEX)&amp;quot; | awk &#39;/is submitted/{print substr($2, 2, length($2)-2);}&#39;)
  dep_cond+=&amp;quot; &amp;amp;&amp;amp; numdone($JOBID,*)&amp;quot; # add new dependencies
done

dep_cond=${dep_cond:4} # remove leading &amp;quot; &amp;amp;&amp;amp; &amp;quot;

bsub -w &amp;quot;$dep_cond&amp;quot; matlab -singleCompThread -nodisplay -r &amp;quot;my_function2()&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A huge thank you to the Euler cluster support for this one! In particular to
&lt;a href=&#34;https://ethz.ch/services/en/organisation/departments/it-services/people/person-detail.html?persid=88087&#34; target=&#34;_blank&#34;&gt;Oliver Byrde&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&#34;a-modest-template&#34;&gt;A modest template&lt;/h2&gt;

&lt;p&gt;Here is a template of the type of scripts I like. Notice the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use of &lt;code&gt;$1&lt;/code&gt;: Taking in arguments from the command line is, in my opinion, really nice.
It saves you the time of opening &lt;a href=&#34;https://en.wikipedia.org/wiki/Vim_(text_editor)&#34; target=&#34;_blank&#34;&gt;vim&lt;/a&gt;
and having to edit, save, quit. You just type your arguments and click enter!&lt;/li&gt;
&lt;li&gt;Use of &lt;code&gt;echo&lt;/code&gt; with if/else statements to check if everything is running as planned.&lt;/li&gt;
&lt;li&gt;Requirement of user confirmation. Some might find this annoying, but I have
often realized, when submitting the job, that something was wrong.
Requiring me to type in a confirmatory &amp;ldquo;yes&amp;rdquo; adds an extra check.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This script reconstructs the steps we had seen before, but with multiple iterations
added, hence the for loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Loading matlab module
echo loading matlab module...
module load new matlab/R2017b

# Necessary input
arg1=$1 # takes in first input argument from command line
arg2=$2 # second input argument from command line
niter=50

# Checking important arguments
if [ &amp;quot;$arg2&amp;quot; == &amp;quot;&#39;this&#39;&amp;quot; ] || [ &amp;quot;$arg2&amp;quot; == &amp;quot;&#39;that&#39;&amp;quot; ]; then
  echo &amp;quot;Argument 2 recognized!&amp;quot;
else
  echo &amp;quot;Argument 2 NOT recognized! You will get an error!&amp;quot;
fi

# Run your loop
read -p &amp;quot;Run your cool script? [y: yes; n: no]&amp;quot; -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    for ((i = 1; i &amp;lt;= $niter; i++)); do
        # Run setup
        if [[ $i -eq 1 ]]; then
          bsub -J &amp;quot;Setup$i&amp;quot; matlab -singleCompThread -nodisplay -r &amp;quot;setup($arg1,$arg2,$i)&amp;quot;
        else
          last_iter=$((i-1))
          bsub -J &amp;quot;Setup$i&amp;quot; -w &amp;quot;done(saveBest$last_iter)&amp;quot; matlab -singleCompThread -nodisplay -r &amp;quot;setup($arg1,$arg2,$i)&amp;quot;
        fi
        # Fit your models
         bsub -J &amp;quot;fitModels$i&amp;quot; -w &amp;quot;done(Setup$i)&amp;quot; matlab -singleCompThread -nodisplay -r &amp;quot;fit_models($arg1,$arg2,$i)&amp;quot;
        # Save your best model
        bsub -J &amp;quot;saveBest$i&amp;quot; -w &amp;quot;done(fitModels$i)&amp;quot; matlab -singleCompThread -nodisplay -r &amp;quot;save_best_model($arg1,$arg2,$i)&amp;quot;
    done
fi

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compare that to a version which uses job arrays:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Loading matlab module
echo loading matlab module...
module load new matlab/R2017b

# Necessary input
arg1=$1 # takes in first input argument from command line
arg2=$2 # second input argument from command line
niter=50

# Run your loop
read -p &amp;quot;Run your cool script? [y: yes; n: no]&amp;quot; -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    for ((i = 1; i &amp;lt;= $niter; i++)); do
        # Run setup
        if [[ $i -eq 1 ]]; then
          bsub -J &amp;quot;Setup$i&amp;quot; matlab -singleCompThread -nodisplay -r &amp;quot;setup($arg1,$arg2,$i)&amp;quot;
        else
          last_iter=$((i-1))
          bsub -J &amp;quot;Setup$i&amp;quot; -w &amp;quot;done(saveBest$last_iter)&amp;quot; matlab -singleCompThread -nodisplay -r &amp;quot;setup($arg1,$arg2,$i)&amp;quot;
        fi
        # Fit your models and extract JOBID from job array
        max_sim=$((nparam-i+1))
        JOBID=$(bsub -J &amp;quot;fitModels$i[1-$max_sim]&amp;quot; -w &amp;quot;done(Setup$i)&amp;quot; matlab -singleCompThread -nodisplay -r &amp;quot;fit_models($arg1,$arg2,\$LSB_JOBINDEX)&amp;quot; | awk &#39;/is submitted/{print substr($2, 2, length($2)-2);}&#39;)
        # Save the best model using JOBID as a dependency
        if [ -n &amp;quot;$JOBID&amp;quot; ]; then
          bsub -J &amp;quot;saveBest$i&amp;quot; -w &amp;quot;numdone($JOBID,*)&amp;quot; matlab -singleCompThread -nodisplay -r &amp;quot;save_best_model($arg1,$arg2,$i)&amp;quot;
        fi
    done
fi

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;other-useful-resources&#34;&gt;Other useful resources&lt;/h2&gt;

&lt;p&gt;To use Euler, you&amp;rsquo;ll find yourself googling &lt;em&gt;a lot&lt;/em&gt; of bash commands. In addition,
figuring out how vim works can also be overwhelming in the beginning.
To ease the pain, here are a few nice cheat sheets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devhints.io/bash&#34; target=&#34;_blank&#34;&gt;Bash scripting  cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devhints.io/vim&#34; target=&#34;_blank&#34;&gt;Vim cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&#34;text-align: center;&#34;&gt;
Happy computations ! üëæüëæüëæ
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Freeview from FreeSurfer</title>
      <link>https://inespereira.com/post/freeview/</link>
      <pubDate>Sun, 31 Mar 2019 11:17:49 +0200</pubDate>
      
      <guid>https://inespereira.com/post/freeview/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://surfer.nmr.mgh.harvard.edu/&#34; target=&#34;_blank&#34;&gt;FreeSurfer&lt;/a&gt; is an open source software package for the analysis and visualization of structural and functional neuroimaging data. It is developed by the &lt;a href=&#34;https://martinos.org/lab/lcn&#34; target=&#34;_blank&#34;&gt;Laboratory for Computational Neuroimaging&lt;/a&gt; at the &lt;a href=&#34;https://martinos.org/&#34; target=&#34;_blank&#34;&gt;Athinoula A. Martinos Center for Biomedical Imaging&lt;/a&gt;.
It&amp;rsquo;s a really useful tool that allows for automated processes as well as manual interventions,
mainly through it&amp;rsquo;s GUI, Freeview.&lt;/p&gt;

&lt;p&gt;I started using FreeSurfer and Freeview  last year and, albeit the documentation being quite
thorough, I had a harder time navigating the website than I expected.&lt;/p&gt;

&lt;p&gt;So here are a few tricks to make your handling FreeSurfer&amp;rsquo;s GUI, Freeview, easier
 and faster!&lt;/p&gt;

&lt;h2 id=&#34;1-starting-freeview&#34;&gt;1. Starting Freeview&lt;/h2&gt;

&lt;p&gt;You can start freeview by just typing &lt;code&gt;freeview&lt;/code&gt; in your command line and then
 opening the files you want. Of course, you will be far better off if you write
 a small script with your usual calls.&lt;/p&gt;

&lt;p&gt;The command options available for Freeview are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;load a volume file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-l&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;load a label file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-dti&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;load one or more dti volumes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-f&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;load a surface&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-w&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;load waypoints&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I have the following script saved under my &lt;code&gt;subjects/&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; export SUBJECT=&#39;&amp;lt;subject name&amp;gt;&#39;
 freeview -v \
     $SUBJECT/mri/T1.mgz \
     $SUBJECT/mri/wm.mgz \
     $SUBJECT/mri/brainmask.mgz \
     -f \
     $SUBJECT/surf/lh.white:edgecolor=blue \
     $SUBJECT/surf/lh.pial:edgecolor=yellow \
     $SUBJECT/surf/rh.white:edgecolor=blue \
     $SUBJECT/surf/rh.pial:edgecolor=yellow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, if I want to analyze, let&amp;rsquo;s say, subject bert&amp;rsquo;s images, I just open my &lt;code&gt;freeview.sh&lt;/code&gt;
 script with a text editor and change &lt;code&gt;&amp;lt;subject name&amp;gt;&lt;/code&gt; to &lt;code&gt;bert&lt;/code&gt; (which is this
 subject&amp;rsquo;s folder name).
 Then, I can open a terminal, navigate to my &lt;code&gt;subjects/&lt;/code&gt; folder and type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ./freeview.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on how to use the &lt;code&gt;freeview&lt;/code&gt; command, type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;freeview --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll get a list of the available sub-options to make the most out of your image
visualization!&lt;/p&gt;

&lt;p&gt;All right, we have opened Freeview and we&amp;rsquo;re ready to start interacting with the GUI!&lt;/p&gt;

&lt;h2 id=&#34;2-check-out-the-available-freeview-keyboard-shortcuts&#34;&gt;2. Check out the available Freeview keyboard shortcuts!&lt;/h2&gt;

&lt;p&gt;This single trick will save you an amazing amount of time. I have been working with
CentOs and a few shortcuts I have
found by experimenting are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Alt + N&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;navigate.png&#34; style=&#34;float: left; margin-right: 10px;&#34;/&gt; Navigate Tool&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl + E&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;recon_edit.png&#34; style=&#34;float: left; margin-right: 10px;&#34;/&gt; Recon Edit Tool&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Alt + E&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;voxel_edit.png&#34; style=&#34;float: left; margin-right: 10px;&#34;/&gt; Voxel Edit Tool&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl + F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Toggle all surfaces&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Alt + C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alternate between volumes/surfaces&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl + P&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Toggle left side menu&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl + T&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Point set edit&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl + R&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Reset View&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Alt + X&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Show sagital images&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Alt + Y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Show axial images&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Alt + Z&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Show coronal images&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Alt + A/D&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Decrease/Increase opacity of currently highlighted volume&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl + D&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Hide brainmask&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Alt + F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Toggle currently highlighted surface&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Alt + U&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Show cursor&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You&amp;rsquo;ll find other shortcuts under &lt;a href=&#34;https://surfer.nmr.mgh.harvard.edu/fswiki/FreeviewGuide/FreeviewReference/FreeviewKeyboardShortcuts&#34; target=&#34;_blank&#34;&gt;this link&lt;/a&gt;. I&amp;rsquo;ll copy the most useful ones here for convenience:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + S&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Save&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl + Z&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Undo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl + Q&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Exit Freeview&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl + O&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Load Volume&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Up/Down Arrow Keys or PageUp/PageDown&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Change slice&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Scroll or Drag-Right-Click&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Zoom In/Zoom Out&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl + Up/Down/Left/Right (arrow keys)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Moving volume (Panning)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Alt + V&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Toggle currently highlighted volume&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Shift-Drag Left Click&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Adjust Contrast/Brightness&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Zoom in at current location&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl-Left-Click (or scroll)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Zoom out at current location&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl-Right-Click (or scroll)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When you&amp;rsquo;re in Voxel/Recon/ROI edit mode:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Draw / Fill&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Left Click&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Erase / Erase Fill&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Shift+Left Click&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;That concludes this short tutorial about Freeview!
If you want to read/know more, the full Freeview Guide can be found &lt;a href=&#34;https://surfer.nmr.mgh.harvard.edu/fswiki/FreeviewGuide&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
Also, check out this &lt;a href=&#34;https://www.youtube.com/watch?v=Mv-ECowxq2o&#34; target=&#34;_blank&#34;&gt;cool Freeview demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;!-- https://discourse.gohugo.io/t/linking-to-static-files-with-hugo/8282 --&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Art of Foot Tickling </title>
      <link>https://inespereira.com/post/the-art-of-foot-tickling/</link>
      <pubDate>Tue, 03 Apr 2018 20:12:34 +0200</pubDate>
      
      <guid>https://inespereira.com/post/the-art-of-foot-tickling/</guid>
      <description>&lt;p style=&#34;text-align: justify;&#34;&gt;One can sometimes feel very puzzled when watching a physician perform the neurological examination. I mean, what information is there to extract from a retracting big toe, from feet constantly a bit more apart from each other than they should be or even from an absent tendon reflex? How were these signs observed in the first place and how did we come to know how to interpret them?&lt;/p&gt;
&lt;p style=&#34;text-align: justify;&#34;&gt;Let us focus, for example, on reflexes. A reflex is an involuntary movement in response to a stimulus. Reflexes in general represent a key part of the neurological examination because of their more objective nature and lesser dependency on patient cooperation. Actually, reflexes and their characteristics are crucial: in conjunction with other signs and symptoms and knowledge of the anatomy of the nervous system, the observer can localize the neurological lesion(s) with a surprising degree of precision... before even resorting to CT or MRI imaging!&lt;/p&gt;

&lt;h2 id=&#34;damme-there-are-no-pores-william-harvey&#34;&gt;&lt;em&gt;Damme there are no pores&lt;/em&gt; (William Harvey)&lt;/h2&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;The first description of a reflex action was presumably provided by Ren√© Descartes (1596-1650) in his book &lt;i&gt;De homine &lt;/i&gt;(1662). Here, he describes an experiment in which a mock blow aimed at a person‚Äôs eyes would lead to prompt eye closure. He conjectured that this response was due to the so-called ‚Äúanimal spirits‚Äù that would travel throughout the body within a hollow nerve tube. Vision, or the sight of the approaching object, was considered a reflection of the animal spirits back to the brain and this is presumed to be where we get the concept of ‚Äúreflex‚Äù: simply the abbreviation of ‚Äúreflection‚Äù. Another example Descartes depicts in his posthumous book is that of a child drawing his (or her...) foot away from a fire. In a very detailed and somewhat oddly mechanistic explanation, Descartes explains how the particles of the fire move the skin of the foot, thereby pulling a string attached on the other end to the pineal gland. This pulling movement opens a pore, thus releasing the animal spirits, that are now free to travel the body to cause the defensive muscle action of retreating the child‚Äôs foot from danger.&lt;/p&gt;
&lt;p style=&#34;text-align: justify;&#34;&gt;As bizarre as this pore-based explanation might nowadays sound, Descartes is actually describing the five components of what we call ‚Äúthe reflex arc‚Äù (Figure 1). To build up a reflex arc, we need:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;Receptors, able to detect a signal (for example: pain);&lt;/li&gt;
    &lt;li&gt;A so-called (sensory) ‚Äúafferent arm‚Äù, that carries the transformed signal to‚Ä¶&lt;/li&gt;
    &lt;li&gt;‚Ä¶ an integrating center, which, when stimulated, activates‚Ä¶&lt;/li&gt;
    &lt;li&gt;‚Ä¶ the (motor) efferent (with an ‚Äúe‚Äù) arm, whose function is to transmit the signal to‚Ä¶&lt;/li&gt;
    &lt;li&gt;‚Ä¶ the effector muscle, which will then carry out the involuntary action.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-237&#34; src=&#34;https://inezpereira.files.wordpress.com/2017/11/null1.png&#34; alt=&#34;Figure 1: A reflex arc.&#34; width=&#34;594&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;div style=&#34;text-align: center&#34;&gt;Figure 1: A reflex arc.&lt;br /&gt;The relay neuron depicts the integrating center of the reflex arc.&lt;/div&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;It took almost another century and a half for Galvani (1737-1798) to demonstrate, in an anonymous pamphlet, that the animal spirits were actually plain electricity. This caused a reorganization of thinking about how to approach the nervous system: it became more grounded in experiment, but a systematic and organized examination was still lacking. In fact, only until the late 1800s did the generation of Erb, Babinski and Gowers (among others) develop the neurological examination as we know it today.&lt;/p&gt;

&lt;h2 id=&#34;types-of-reflexes&#34;&gt;Types of reflexes&lt;/h2&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;The most commonly encountered reflexes are the myotatic (tendon) and cutaneous types. Most people are familiar with tendon reflexes (&lt;i&gt;vide&lt;/i&gt; the classic&lt;a href=&#34;https://www.youtube.com/watch?v=it06ffkfll8&#34;&gt; Veet wax strips commercial&lt;/a&gt;), but rubbing the skin also elicits superficial reflexes. A classic superficial reflex is the plantar reflex, whereby the sole of the foot is stimzulated with a blunt instrument. The reflex can take one of two forms. In healthy adults, the plantar reflex causes &lt;b&gt;flexion &lt;/b&gt;of the hallux (&lt;i&gt;aka&lt;/i&gt; ‚Äúbig toe‚Äù). An &lt;b&gt;extension &lt;/b&gt;of the hallux, however, is known as the Babinski response or Babinski sign (Figure 2).&lt;/p&gt;

&lt;p&gt;&lt;img title=&#34;&#34; src=&#34;https://inezpereira.files.wordpress.com/2017/11/null2.png&#34; alt=&#34;&#34; width=&#34;406&#34; height=&#34;357&#34; /&gt;
&lt;div style=&#34;text-align: center&#34;&gt;Figure 2: The plantar reflex.&lt;/div&gt;&lt;/p&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;This response exists as a normal primitive reflex in infants, but indicates lesion to the motor pathway in adults. More specifically, a Babinski response in adults points to a lesion in the first part of the motor pathway (Figure 3), where the upper (or first) motor neuron (of a total of two) lies.&lt;/p&gt;

&lt;p&gt;&lt;img title=&#34;&#34; src=&#34;https://inezpereira.files.wordpress.com/2017/11/image.png&#34; alt=&#34;&#34; width=&#34;358&#34; height=&#34;788&#34; /&gt;
&lt;div style=&#34;text-align: center&#34;&gt;Figure 3: The motor pathway, also called pyramidal tract. Notice that the first motor neuron (depicted in yellow) extends from the cerebral cortex to the anterior horn of the spinal medulla. A lesion at any point along its long path (due to stroke, for instance) can produce the Babinski response.&lt;/div&gt;&lt;/p&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;The Babinski extensor toe response was described by Joseph F√©lix Babinski to the &lt;i&gt;Soci√©t√© de Biologie de Paris &lt;/i&gt;on February 22nd 1896. Babinski belonged to the generation that followed the legendary Jean-Marie Charcot. Charcot, a famous neurologist and professor of anatomical-pathology, became known for his &lt;i&gt;m√©thode anatomo-clinique&lt;/i&gt;, &lt;i&gt;i.e.&lt;/i&gt; careful and systematic correlations between clinical signs and neuropathological lesions. In using this strategy, Charcot succeeded, for instance, in distinguishing the different signs of Parkinson‚Äôs disease. He did not, however, rely much on the physical examination, and it is said that he rarely touched his patients. Babinski met Charcot in a medical competition, where he ended up being awarded a post in the latter‚Äôs service. Babinski hence arrived at the famous H√¥pital de Salp√™tri√®re in 1885, at the height of Charcot‚Äôs career. After his mentor‚Äôs death, Babinski, for political or nonpolitical reasons, distanced himself from Charcot in that he advocated the superior importance of the neurological examination in establishing a clinical diagnosis.&lt;/p&gt;
&lt;p style=&#34;text-align: justify;&#34;&gt;But, as I was saying, on February 22nd 1896, two and a half years after Charcot passed away, Babinski presented his ‚Äúnew‚Äù (more on these quotation marks later) sign to a lively crowd of physicians, physiologists, basic scientists and the like. At first, he described the sign as a response to painful stimuli but, in a subsequent communication, added that simply stroking or tickling the sole of the foot could also elicit this same reaction. He further correlated this reflex with a lesion in the pyramidal tract (remember Figure 3) and later included the fanning movement of the other toes in his description (for some wonderful french wordplay: &lt;a href=&#34;http://www.biusante.parisdescartes.fr/images/banque/zoom/anmpx48x0004bis.jpg&#34;&gt;Babinski in the early 20th century press.&lt;/a&gt;).&lt;/p&gt;
&lt;p style=&#34;text-align: justify;&#34;&gt;Interestingly, he also focused on hysteria (a now obsolete diagnosis with a very interesting story to tell), just enough to demonstrate that the presence of the extensor response effectively excludes it. Indeed, although not the first to observe the extensor toe response in pyramidal tract lesions, Babinski is credited for its appropriate interpretation. As a matter of fact, medieval, Renaissance and baroque painters had already correctly represented the extensor toe response in infants.&lt;/p&gt;

&lt;p&gt;&lt;img title=&#34;&#34; src=&#34;https://inezpereira.files.wordpress.com/2017/11/null3.png&#34; alt=&#34;&#34; width=&#34;438&#34; height=&#34;598&#34; /&gt;
&lt;div style=&#34;text-align: center&#34;&gt;Figure 4: &lt;i&gt;The Small Cowper Madonna&lt;/i&gt;, Raphael, circa 1505.&lt;br /&gt;Can you spot the celestial extensor toe?&lt;/div&gt;&lt;/p&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;After Babinski‚Äôs first description, a great number of publications with&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/books/NBK397/table/A2413/?report=objectonly&#34;&gt; modified methods to elicit the same extensor response&lt;/a&gt; emerged. Among them were Oppenheim (1858‚Äì1919), who proposed to stimulate the tibial surface in a downward movement and Gordon (1874 ‚Äì 1953), who would squeeze the calf muscles of his patients.&lt;/p&gt;

&lt;h2 id=&#34;that-s-interesting-but-what-should-i-take-home&#34;&gt;That‚Äôs interesting, but what should I take home?&lt;/h2&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;Aside from being instilled with a few more drops of neurophilia, I hope you now better understand how amazing reflexes actually are. Take a look again at their organized base-structure. Notice that the arc in Figure 1 does not involve the brain‚Äôs outer cortex, and this is true for other non-spinal reflexes. Hence, reflexes are often useful as a way to generate rapid action without the need to involve consciousness. Reflexes are the reason why you ‚Äúautomatically‚Äù remove your hand from a burning pan, why your pupils fastly constrict when exposed to more light, why you salivate when you set your eyes on that oh-so-tasty moussaka.&lt;/p&gt;
&lt;p style=&#34;text-align: justify;&#34;&gt;If anything, you are now able to understand some &lt;a href=&#34;https://itunes.apple.com/us/album/table-for-one/id1292944953&#34;&gt;very nerdy references&lt;/a&gt;.¬†Until next time!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;i&gt;List of references:&lt;/i&gt;&lt;/b&gt;&lt;i&gt;&lt;/i&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;https://doi.org/10.1016/B978-0-444-53480-4.09988-4&#34;&gt;Aminoff, M. J.. &amp;ldquo;Chapter 16: History of the development of the neurological examination&amp;rdquo; &lt;em&gt;Handbook of Clinical Neurology Vol. 95,¬†&lt;/em&gt;Elsevier, 2009.¬†&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://books.google.de/books/about/L_Homme_de_Ren%C3%A9_Descartes_et_un_Trait%C3%A9.html?id=Un1pY1QGFrcC&amp;redir_esc=y&#34;&gt;Descartes, R.,¬†&lt;em&gt;&lt;em&gt;&lt;i&gt;L‚ÄôHomme de Ren√© Descartes&lt;/i&gt;¬†et un¬†&lt;i&gt;Trait√© de la formation du f≈ìtus,¬†&lt;/i&gt;Charles&lt;/em&gt;&lt;/em&gt; Angot, 1664.&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://doi.org/10.1055/s-2002-36761&#34;&gt;Goetz, C. G., &amp;ldquo;History of the extensor plantar response: Babinski and Chaddock signs.&amp;ldquo;¬†&lt;em&gt;Seminars in Neurology&lt;/em&gt;, 22(4), 391‚Äì398,¬†2002.¬†&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://doi.org/10.1136/jnnp-2013-306881&#34;&gt;Nicholl, D. J., &amp;amp; Appleton, J. P., &amp;ldquo;Clinical neurology: why this still matters in the 21st century.&amp;ldquo;¬†&lt;em&gt;Journal of Neurology, Neurosurgery &amp;amp; Psychiatry,&lt;/em&gt; 2015.&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://doi.org/10.1080/09647049209525509&#34;&gt;Patten, B. M., &amp;ldquo;The history of the neurological examination . Part 1 : Ancient and pre ‚Äê modern history ‚Äê 3000 BC to AD 1850.&amp;rdquo; &lt;em&gt;Journal of the History of the Neurosciences : Basic and Clinical Perspectives&lt;/em&gt;, 37‚Äì41, 1992.&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://doi.org/10.1055/s-2002-36756&#34;&gt;Steinberg, D. A., &amp;ldquo;Scientific neurology and the history of the clinical examination of selected motor cranial nerves.&amp;rdquo; &lt;em&gt;Seminars in Neurology&lt;/em&gt;, 22(4), 349‚Äì355, 2002.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
