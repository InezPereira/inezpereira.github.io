[{"authors":[],"categories":[],"content":"When the corona crises started we decided to go online with our @CompPsychiatry course and make it free of charge. The result was a course that ended up being 4x bigger than usual (\u0026gt;1000 participants) and more inclusive than ever. Thanks to everyone who helped pull this off!!! pic.twitter.com/ybi8QrgI19\n\u0026mdash; Frederike Petzschner (@rikepetzschner) September 11, 2020  This year\u0026rsquo;s Computational Psychiatry Course (CPC) Zurich, like many other events all over the world, faced the challenge of moving to an online setting. Much in the spirit of this post, I\u0026rsquo;ll share here the combination of tools that was used and how useful they proved to be at the CPC Zurich 2020. All the materials from this year\u0026rsquo;s and previous events can be found here. This year\u0026rsquo;s video recordings can be found here.\nWebinar tool - Creating a focused environment We used Zoom Webinar to broadcast the lectures. Our Zoom Webinar workflow included:\n Participant Registration: participants were asked to register for the webinar. Using this feature of Zoom Webinar meant setting up one Webinar per day, which forced participants and speakers to use different links for each day. A shoutout to Zoom here: it would be great to be able to add a CSV of the registrants to a recurring Zoom Webinar üòä. Technical Checks: checking for technical problems (e.g. faulty video sharing, poor audio) can be done in Zoom Webinar\u0026rsquo;s Practise room, before broadcasting. When these checks are done consistently, you avoid quite a few live surprises üòâ. Chat options: Participants had the opportunity to chat on Slack, and so the chat on Zoom Webinar was disabled. This proved to have one major advantage: it made chat an opt-in feature of the lectures, and not something that just came with the tool used. This led to less distractions for the speakers and chairs, and possibly for some attendees. In addition, this also meant that it was clear that the Q\u0026amp;A tool was the tool to use to ask questions (no chat moderator hunting for questions needed!). Q\u0026amp;A: attendees posed their questions via de Q\u0026amp;A tool and were able to upvote each other\u0026rsquo;s enquiries. Added to this, the session chair would also curate the Q\u0026amp;A list and sometimes combine related questions. Participants always posed a lot of questions, and to not cut discussions short, they were invited to repost them in the Slack Q\u0026amp;A channel. Speakers often answered further questions on Slack üíõ.  Promoting interactions Slack Slack proved to be a great tool: it was a way of answering questions and sharing resources in a manner that was visible to everyone. In addition, attendees often supported each other by answering each other\u0026rsquo;s questions! üòç Besides the usual #general, #fun and #random channels, the following other channels were created:\n #q_and_a: this channel was extensively used to follow up on discussions held during the webinar and also provided an opportunity for attendees to ask further questions. #resources: to refer to journal articles, books, videos, slides, links to open source software packages\u0026hellip; some speakers provided even extensive reading lists! #tutorial_helpdesk: support was provided via this channel for the tutorials involving installation of software. #zoom: to discuss technical issues related to zoom. Attendees would use this channel to report technical issues during the webinar (and sometimes even propose solutions). #job_postings: self-descriptive üôÉ #social: a space where attendees could introduce themselves and start discussions that could followed up on in the Gather rooms (see below).  Gather rooms Gather is a new video chat platform with a Gameboy feel, particularly interesting because it parts from traditional meeting-directed software. A user on Gather becomes a sprite that can move around in a pixel-arty virtual space. You only get to hear and talk to someone once you have sufficiently approached them. This is essential, because it enables users to form groups and have conversations in parallel\u0026hellip; like in real life, basically. And, like in real life, you can move from one group to another and actually run into people you know. Gather offers a set of maps you can use off the shelf, but making your own customized maps is not only easy, but also a lot of fun! Tutorials on how to do this can be found on Gather\u0026rsquo;s YouTube channel. I personally used online tools such as this platform to add more pixel art and nerdy references ü§ì.\nMind-matching Also in the spirit of what has been done at other great events and conferences, we used freely available software, coupled with input from our own üß†s to match participants based on their research interests. Mind-matchers could then contact each other and meet. Having been matched myself at other events, I found mind-matching to be a great way to meet new people. Specifically, because these meetings have to be planned and organized, I found that these interactions were always very purposeful and focused. I had great conversations and met super interesting people via mind-matching, and hope CPC Zurich attendees did so too.\n","date":1600001601,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600001601,"objectID":"f3a5698b85e406b8aaae78df8c72ad19","permalink":"https://inespereira.com/post/tools-for-online-events/","publishdate":"2020-09-13T14:53:21+02:00","relpermalink":"/post/tools-for-online-events/","section":"post","summary":"When the corona crises started we decided to go online with our @CompPsychiatry course and make it free of charge. The result was a course that ended up being 4x bigger than usual (\u0026gt;1000 participants) and more inclusive than ever. Thanks to everyone who helped pull this off!!! pic.twitter.com/ybi8QrgI19\n\u0026mdash; Frederike Petzschner (@rikepetzschner) September 11, 2020  This year\u0026rsquo;s Computational Psychiatry Course (CPC) Zurich, like many other events all over the world, faced the challenge of moving to an online setting.","tags":[],"title":"Tools for Online Events","type":"post"},{"authors":[],"categories":[],"content":"Scientists are expected to be effective communicators, but that can be a little tricky without a few conscious tricks up your sleeve.\nVisualization, in particular, can be a very powerful means of conveying information, be it in your papers, posters, presentations, chapters, or blogposts.\nüñç Nota bene: In this post, I summarize a few recommendations from various sources that I, personally, found very useful. For a more in-depth take on the following and other points, do consult the series of Points of View columns published in Nature Methods. A collection of these can be found here. Another great online read can be found here.\nPlease note that all of these recommendations are meant to be general and that one should always take into account any field-specific conventions.\nColor There are a few things to know about color.\nFirst, color varies in terms of:\n Hue: \u0026ldquo;the attribute we use to classify a color as red or yellow.\u0026rdquo; [1] Saturation: which \u0026ldquo;describes the neutrality of a color; a red object with little or no white is said to be very saturated.\u0026rdquo; [1] Lightness: which \u0026ldquo;tells us about its relative ordering on the dark-to-light scale.\u0026rdquo; [1]  Figure 1 shows a way to represent these dimensions:\nFigure 1: Picking colors. Figure 1: HSL (hue, saturation, lightness) color solid. -- Now, when picking colors, these should ideally be discernible in grayscale as well. That way, if someone prints your figure in black and white, they still get the message üòä. One way to do this is to spiral around the color wheel while varying lightness as well. This only works effectively for a limited number of colors: around 6 to 8 [1]. Past 8, it just becomes harder to find discernible colors.\nAs for representing data, color is ill-suited to represent quantitative data, because it is not in principle clear how to order different colors. It is, however, appropriate to characterize categorical data.\nWhile color might make a figure seem nicer, it should be used judiciously. Indeed, there are better strategies to compare elements, and these were ranked by Cleveland and McGill [2]:\n   Rank Aspect compared     1 Position along common scale    2 Position on the same, but non-aligned scales    3 Length    4 Angle    5 Area    6 Volume     Color saturation    7 Color hue     This made me realize that bar charts are a very effective tool for comparison!\nA word on color blindness Given that certain forms of color blindness are quite common, this is something that you should definitely take into account. Here is a list of colors from Bang Wong, optimized for color-blind individuals [3]:\n   Color Color name RGB      Black 0, 0, 0    Orange 230, 159, 0    Sky blue 86, 180, 233    Blueish green 0, 158, 115    Yellow 240, 228, 66    Blue 0, 114, 178    Vermillion 213, 94, 0    Reddish purple 204, 121, 167    Salience Now that we\u0026rsquo;ve reviewed a few tricks of how to effectively compare elements, let\u0026rsquo;s see how to create contrast, i.e. visually separate one part of an image from the rest. Salience, the visual quality of an object that makes it more prominent, can be achieved in several ways [1]:\nFigure 2: Achieving salience. A few notes on this:\n Sometimes, it might make sense to have multiple views of the same graph, in order to emphasize one thing at a time. Make sure the most salient aspect of the figure is also the most relevant!  Gestalt principles The Gestalt principles of perception are a set of principles which attempt to explain why humans naturally perceive objects as being organized or grouped [5]. There are several principles [4-5]:\n   Principle Remarks     Similarity Similar objects are grouped together    Proximity Grouping based on distance (do you see 2 rows?)    Connection Lines create a clear connection and groups    Enclosure Enclosure can overcome the other principles.     Notice how you can use enclosure to bring the reader\u0026rsquo;s attention to different parts of a graph or table!\nLayout A layout has both an aesthetic and clarifying purpose. A simple way to organize your slides/posters is to follow the \u0026ldquo;rule of thirds\u0026rdquo; [6].\nFigure 3: Power points. Basically, you can start by dividing the page into 9 equal parts. Objects placed along the lines and especially at their intersection points (the so-called power points) become more prominent. You can use this to guide the observer.\nOther The above principles should already help a fair amount, but here are few other tips:\n Negative space (or whitespace): use it to structure your visualization and to let it breathe (no one likes crammed posters\u0026hellip;). For more on this, see [7]. Typography: favor sans serif fonts for slides and serif fonts for greater lengths of text (e.g. posters, papers) [8]. Overview figures: these can be very helpful! However, keep them simple and avoid entering graphs or results at this point [9]. üß® Pie charts: while pie charts can be useful in describing parts of a whole and are standard practise in some fields, they have been criticized. Edward Tufte once wrote \u0026ldquo;the only design worse than a pie chart is several of them\u0026rdquo; [10]. To compare elements, pie charts rely on differences in area or angle, and we have previously seen that there are more effective means of comparison. Hence, a bar chart can often be a more effective alternative. If you do opt for a pie chart, you might want to know that a specific ordering of slices is sometimes recommended. Specifically, Bang Wong writes: \u0026ldquo;place the largest wedge to the right of 12 o‚Äôclock, the second largest to the left of 12 o‚Äôclock and the remainder counter-clockwise descending in size\u0026rdquo; [11]. Graphically:  Figure 4: Organizing a pie chart. References [1] B. Wong, \u0026ldquo;Color coding\u0026rdquo;, Nature Methods, 7:573, 2010.\n[2] W. S. Cleveland, R. McGill, \u0026ldquo;Graphical Perception and Graphical Methods for Analyzing Scientific Data\u0026rdquo;, Science, 229(4716), 1985.\n[3] B. Wong, \u0026ldquo;Color blindness\u0026rdquo;, Nature Methods, 8:441, 2011.\n[4] B. Wong, \u0026ldquo;Gestalt principles (part 1)\u0026rdquo;, Nature Methods, 7:863, 2010.\n[5] Principles of grouping, Wikipedia, [accessed on 10.02.2020]\n[6] B. Wong, \u0026ldquo;Layout\u0026rdquo;, Nature Methods, 8:783, 2011.\n[7] B. Wong, \u0026ldquo;Negative Space\u0026rdquo;, Nature Methods, 8:5, 2011.\n[8] B. Wong, \u0026ldquo;Typography\u0026rdquo;, Nature Methods, 8:277, 2011.\n[9] B. Wong, \u0026ldquo;The overview figure\u0026rdquo;, Nature Methods, 8:365, 2011.\n[10] E. Tufte, The Visual Display of Quantitative Information, 2nd edition, Graphics Press, 2001.\n[11] B., Wang, Points of review (part 2), Nature Methods, 8:189, 2011.\n","date":1581048729,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581048729,"objectID":"394deaee734c5d39008fa0100b24bc0d","permalink":"https://inespereira.com/post/data-visualization/","publishdate":"2020-02-07T11:12:09+07:00","relpermalink":"/post/data-visualization/","section":"post","summary":"Scientists are expected to be effective communicators, but that can be a little tricky without a few conscious tricks up your sleeve.\nVisualization, in particular, can be a very powerful means of conveying information, be it in your papers, posters, presentations, chapters, or blogposts.\nüñç Nota bene: In this post, I summarize a few recommendations from various sources that I, personally, found very useful. For a more in-depth take on the following and other points, do consult the series of Points of View columns published in Nature Methods.","tags":[],"title":"Data Visualization","type":"post"},{"authors":["In√™s Pereira"],"categories":[],"content":"üñç Nota bene: You will need to be an ETH member to use Euler. However, this post might still be useful if you happen to be working on another cluster which uses the LSF batch system. Also relevant: I am currently mainly using MATLAB to run my simulations, so you\u0026rsquo;ll find some MATLAB specific advice. For Python specifics, check out this page.\n‚åõÔ∏è TL;DR: check out the end of the blog post for a practical suggestion on how to structure your job submission scripts.\nEuler ? Euler is the high performance computing cluster at ETH Zurich.\nLike its predecessors, Euler follows a shareholder model, and is for the most part financed by its users. These \u0026ldquo;shareholders\u0026rdquo; then receive a share of the cluster\u0026rsquo;s resources (i.e CPU time), which is proportional to their investment. However, a small share of Euler is financed by the IT Services and is open to all ETH members.\nAnd that's a huge hooray for students! Euler is really a great resource, but can be associated with a steep learning curve, especially if you are not used to working with a terminal and all that jazz.\nIn this post, we\u0026rsquo;ll go through:\n How to run your first job Some advanced tricks A template for future jobs  Running a simple job Connecting to Euler The first thing you need to do is to connect to Euler. To do that, you either need to be within the ETH network or connected via VPN. The only requirement to login is a valid ETH account (no forms to fill out üéâ). Open a terminal and type:\nssh username@euler.ethz.ch Now type in your NETHZ password\u0026hellip; and you\u0026rsquo;re in! If this is the first time you\u0026rsquo;re logging in, the only extra step is to accept the cluster\u0026rsquo;s usage rights.\nFile transfer To run your jobs, you\u0026rsquo;ll need to transfer your scripts and data to the cluster. To do so, you can use the scp command. The general use is as follows:\nscp [options] source destination Specifically, what you\u0026rsquo;ll need to type is:\nscp file username@euler.ethz.ch:path/to/destination # from local computer to Euler scp username@euler.ethz.ch:path/to/source/file path/to/destination # from Euler to local computer To transfer directories, the option -r needs to be used:\nscp -r directory username@euler.ethz.ch:path/to/destination # from local computer to Euler scp -r username@euler.ethz.ch:path/to/source/directory path/to/destination # from Euler to local computer You\u0026rsquo;ll find that acquainting yourself with bash scripting will come in handy for this type of commands. Check out the cheat sheet I left in the end of the blog post for just that!\nA word on data storage When it comes to personal storage, every user has access to two options:\nHOME=/cluster/home/username SCRATCH=/cluster/scratch/username Home is a safe long-term storage for important data. Only you can access it and the content is saved every hour (snapshot) and every night (tape backup). You are allowed 16 GB of data or a maximum of 100 000 files. This is the directory (folder) you\u0026rsquo;ll automatically find yourself in once you login.\nScratch, on the other hand, is designed as a fast short-term storage. There is no backup and ETH will warn you that it is purged on a regular basis. Your disk quota in scratch rises to 2.5 TB and a maximum of 1 000 000 files.\nTo check how far away (or how close\u0026hellip;) you are from your quota, use the command lquota:\nlquota +-----------------------------+-------------+------------------+------------------+------------------+ | Storage location: | Quota type: | Used: | Soft quota: | Hard quota: | +-----------------------------+-------------+------------------+------------------+------------------+ | /cluster/home/user | space | 8.85 GB | 17.18 GB | 21.47 GB | | /cluster/home/user | files | 25610 | 80000 | 100000 | +-----------------------------+-------------+------------------+------------------+------------------+ | /cluster/shadow | space | 4.10 kB | 2.15 GB | 2.15 GB | | /cluster/shadow | files | 2 | 50000 | 50000 | +-----------------------------+-------------+------------------+------------------+------------------+ | /cluster/scratch/user | space | 237.57 kB | 2.50 TB | 2.70 TB | | /cluster/scratch/user | files | 29 | 1000000 | 1500000 | +-----------------------------+-------------+------------------+------------------+------------------+ For more information on data storage (e.g. options for shareholders), be sure to check out this presentation or this page.\nUsing Euler All right! Now we\u0026rsquo;re ready to start using the cluster! And it all boils down to this:\nbsub [LSF options] job Of course, the tricky part is to figure out how to use the options and what constitutes a job. Well, here are a few options I find particularly useful (for more, check out this reference):\n   Option Description     -W HH:MM Allowed duration for job. Default: 04:00 hours.   -R \u0026quot;rusage[mem=X]\u0026quot; Memory (in MB per core) required. Default: X = 1024 MB.   -J jobname Assigns name to job. Not necessarily unique!   -w \u0026quot;depcond\u0026quot; Sets dependencies between jobs. More on this below.   -r If your node crashes, LSF will re-run the job on another node.    Now mind you that a job can be:\n a Linux command: bsub [LSF options] command a shell script: bsub [LSF options] \u0026lt; script a program: bsub [LSF options] path/to/program  Ok, so far so good. Now, to use MATLAB, you\u0026rsquo;ll first need to load it.\nmodule load new matlab/R2018a Notice that I am loading a specific version of MATLAB. For more information on how to configure the MATLAB version you want to run, check out this link.\nOnce that\u0026rsquo;s done, let\u0026rsquo;s say you would like to fit a model using a script you wrote beforehand. To submit your job, you then type:\nbsub -J \u0026quot;fitModel\u0026quot; matlab -singleCompThread -nodisplay -r \u0026quot;fit_model\u0026quot; Pardon? What are all those options? It\u0026rsquo;s fairly easy:\n -singleCompThread: forces MATLAB to use only one thread for its computations (prevents MATLAB from overloading the compute nodes). -nodisplay: just explicitly tell MATLAB no graphical display is available.  ‚ö†Ô∏è #MatlabProTip: the -r option must be followed by a function. That means that you should omit the .m at the end of your script name. This can be confusing or easily overlooked if your function doesn‚Äôt take in any arguments (as in the example above), and has once cost me an embarrassing amount of time.\n‚ö†Ô∏è‚ö†Ô∏è #Update: the -r option is deprecated in Matlab 2019a and newer versions. Instead, the -batch option should be used. For more on this, check out this link.\nYou have submitted your job and get back:\nGeneric job. Job \u0026lt;94709747\u0026gt; is submitted to queue \u0026lt;normal.4h\u0026gt;. That looks good. To manage your jobs, you\u0026rsquo;ll then need two new commands: bjobs and bkill, which let you monitor or kill all jobs or specific jobs (for more details, read this reference).\nbjobs \u0026gt; JOBID USER STAT QUEUE FROM_HOST EXEC_HOST JOB_NAME SUBMIT_TIME \u0026gt; 94709747 jdoe RUN normal.4h euler01 eu-c7-106-0 fitModel Jul 3 07:19 bkill 0 # terminate all jobs \u0026gt; Job \u0026lt;94709747\u0026gt; is being terminated An alternative to bjobs is bbjobs (aka better bjobs).\nMore advanced tricks Let\u0026rsquo;s take things up a notch. Let\u0026rsquo;s say that you need to run jobs which somehow depend on each other. The example I\u0026rsquo;ll use here is a greedy feature selection algorithm. Don\u0026rsquo;t mind the details, the important thing is you need to do your computations in three stages:\n Run a setup function (e.g. restructure some folders) Train your models Choose the best model  Now that means that you only want step 2 to kick in once the setup is ready. That\u0026rsquo;s called job chaining and can be done as follows:\nbsub -J job1 command1 bsub -J job2 -w \u0026quot;done(job1)\u0026quot; command2 bsub -J job3 -w \u0026quot;done(job2)\u0026quot; command3 Note however that the condition for job2 is only fulfilled if job1 is completed successfully. If, for some reason, job1 crashes or is killed because it reached the runtime or memory limit, then the dependency for job2 is never true and job2 will stand, pending, forever\u0026hellip; If you actually, for some heartless reason, don\u0026rsquo;t really care what happens to job1, then you should write:\nbsub -J job1 command1 bsub -J job2 -w \u0026quot;ended(job1)\u0026quot; command2 If step 2 involves a suite of models and you want to only start step 3 once all models in step 2 are finished, then you might run into a problem.\nIf you only have two models and don\u0026rsquo;t mind writing out all the dependencies, you can opt for:\nbsub -J job1 command1 # train model 1 bsub -J job2 command2 # train model 2 bsub -J job3 -w \u0026quot;done(job1) \u0026amp;\u0026amp; done(job2)\u0026quot; command3 # choose best model If, on the other hand, you are fitting a lot of models in step 2, you should consider using job arrays.\nbsub -J job[1-10] command -J job[1-10] defines the name of the array and the number of jobs it will contain (in this case: 10). You then need to get the JOBID of this job array. This is because the JOBID will be the same for the whole job array, but different subjobs will have different names. To get the JOBID, one way is to use bjobs and just copy the JOBID (let\u0026rsquo;s say: 94709747). Then, you can write:\nbsub -w \u0026quot;numdone(94709747,*)\u0026quot; -J job2 command2 However, if you prefer (I would) to have the JOBID extracted automatically, then this is what you want:\nJOBID=$(bsub command1 | awk '/is submitted/{print substr($2, 2, length($2)-2);}') if [ -n \u0026quot;$JOBID\u0026quot; ]; then bsub -w \u0026quot;numdone($JOBID,*)\u0026quot; command2 fi The first line of code will run the job it contains and extract the job\u0026rsquo;s ID. Filling two needs with one deed üí™. Oh wait, but what if I need to pass the array index as an argument to a function? That can also be done! You can pass $LSB_JOBINDEX as a command-line argument. Note the backslash \\ before $LSB_JOBINDEX:\nbsub -J \u0026quot;job[1-10]\u0026quot; matlab -nodisplay -singleCompThread -r \u0026quot;my_function(\\$LSB_JOBINDEX)\u0026quot; üí£ Ok, now an even harder thing to do would be to set a dependency on multiple job arrays. That can also be done, with a few bash tricks:\ndep_cond=\u0026quot;\u0026quot; # create a variable to store the full dependency for i in {1..50}; do JOBID=$(bsub -J \u0026quot;job$i[1-10]\u0026quot; matlab -nodisplay -singleCompThread -r \u0026quot;my_function(\\$LSB_JOBINDEX)\u0026quot; | awk '/is submitted/{print substr($2, 2, length($2)-2);}') dep_cond+=\u0026quot; \u0026amp;\u0026amp; numdone($JOBID,*)\u0026quot; # add new dependencies done dep_cond=${dep_cond:4} # remove leading \u0026quot; \u0026amp;\u0026amp; \u0026quot; bsub -w \u0026quot;$dep_cond\u0026quot; matlab -singleCompThread -nodisplay -r \u0026quot;my_function2()\u0026quot; A huge thank you to the Euler cluster support for this one! In particular to Oliver Byrde!\nA modest template Here is a template of the type of scripts I like. Notice the following:\n Use of $1: Taking in arguments from the command line is, in my opinion, really nice. It saves you the time of opening vim and having to edit, save, quit. You just type your arguments and click enter! Use of echo with if/else statements to check if everything is running as planned. Requirement of user confirmation. Some might find this annoying, but I have often realized, when submitting the job, that something was wrong. Requiring me to type in a confirmatory \u0026ldquo;yes\u0026rdquo; adds an extra check.  This script reconstructs the steps we had seen before, but with multiple iterations added, hence the for loop.\n#!/bin/bash # Loading matlab module echo loading matlab module... module load new matlab/R2017b # Necessary input arg1=$1 # takes in first input argument from command line arg2=$2 # second input argument from command line niter=50 # Checking important arguments if [ \u0026quot;$arg2\u0026quot; == \u0026quot;'this'\u0026quot; ] || [ \u0026quot;$arg2\u0026quot; == \u0026quot;'that'\u0026quot; ]; then echo \u0026quot;Argument 2 recognized!\u0026quot; else echo \u0026quot;Argument 2 NOT recognized! You will get an error!\u0026quot; fi # Run your loop read -p \u0026quot;Run your cool script? [y: yes; n: no]\u0026quot; -n 1 -r echo if [[ $REPLY =~ ^[Yy]$ ]]; then for ((i = 1; i \u0026lt;= $niter; i++)); do # Run setup if [[ $i -eq 1 ]]; then bsub -J \u0026quot;Setup$i\u0026quot; matlab -singleCompThread -nodisplay -r \u0026quot;setup($arg1,$arg2,$i)\u0026quot; else last_iter=$((i-1)) bsub -J \u0026quot;Setup$i\u0026quot; -w \u0026quot;done(saveBest$last_iter)\u0026quot; matlab -singleCompThread -nodisplay -r \u0026quot;setup($arg1,$arg2,$i)\u0026quot; fi # Fit your models bsub -J \u0026quot;fitModels$i\u0026quot; -w \u0026quot;done(Setup$i)\u0026quot; matlab -singleCompThread -nodisplay -r \u0026quot;fit_models($arg1,$arg2,$i)\u0026quot; # Save your best model bsub -J \u0026quot;saveBest$i\u0026quot; -w \u0026quot;done(fitModels$i)\u0026quot; matlab -singleCompThread -nodisplay -r \u0026quot;save_best_model($arg1,$arg2,$i)\u0026quot; done fi Compare that to a version which uses job arrays:\n#!/bin/bash # Loading matlab module echo loading matlab module... module load new matlab/R2017b # Necessary input arg1=$1 # takes in first input argument from command line arg2=$2 # second input argument from command line niter=50 # Run your loop read -p \u0026quot;Run your cool script? [y: yes; n: no]\u0026quot; -n 1 -r echo if [[ $REPLY =~ ^[Yy]$ ]]; then for ((i = 1; i \u0026lt;= $niter; i++)); do # Run setup if [[ $i -eq 1 ]]; then bsub -J \u0026quot;Setup$i\u0026quot; matlab -singleCompThread -nodisplay -r \u0026quot;setup($arg1,$arg2,$i)\u0026quot; else last_iter=$((i-1)) bsub -J \u0026quot;Setup$i\u0026quot; -w \u0026quot;done(saveBest$last_iter)\u0026quot; matlab -singleCompThread -nodisplay -r \u0026quot;setup($arg1,$arg2,$i)\u0026quot; fi # Fit your models and extract JOBID from job array max_sim=$((nparam-i+1)) JOBID=$(bsub -J \u0026quot;fitModels$i[1-$max_sim]\u0026quot; -w \u0026quot;done(Setup$i)\u0026quot; matlab -singleCompThread -nodisplay -r \u0026quot;fit_models($arg1,$arg2,\\$LSB_JOBINDEX)\u0026quot; | awk '/is submitted/{print substr($2, 2, length($2)-2);}') # Save the best model using JOBID as a dependency if [ -n \u0026quot;$JOBID\u0026quot; ]; then bsub -J \u0026quot;saveBest$i\u0026quot; -w \u0026quot;numdone($JOBID,*)\u0026quot; matlab -singleCompThread -nodisplay -r \u0026quot;save_best_model($arg1,$arg2,$i)\u0026quot; fi done fi Other useful resources To use Euler, you\u0026rsquo;ll find yourself googling a lot of bash commands. In addition, figuring out how vim works can also be overwhelming in the beginning. To ease the pain, here are a few nice cheat sheets:\n Bash scripting cheat sheet Vim cheat sheet  Happy computations ! üëæüëæüëæ ","date":1562160073,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562160073,"objectID":"733b2c9eada75e9f5b220e3dbfd80cd6","permalink":"https://inespereira.com/post/eth-euler/","publishdate":"2019-07-03T15:21:13+02:00","relpermalink":"/post/eth-euler/","section":"post","summary":"üñç Nota bene: You will need to be an ETH member to use Euler. However, this post might still be useful if you happen to be working on another cluster which uses the LSF batch system. Also relevant: I am currently mainly using MATLAB to run my simulations, so you\u0026rsquo;ll find some MATLAB specific advice. For Python specifics, check out this page.\n‚åõÔ∏è TL;DR: check out the end of the blog post for a practical suggestion on how to structure your job submission scripts.","tags":[],"title":"A beginner's guide to ETH's Euler","type":"post"},{"authors":[],"categories":[],"content":"FreeSurfer is an open source software package for the analysis and visualization of structural and functional neuroimaging data. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. It\u0026rsquo;s a really useful tool that allows for automated processes as well as manual interventions, mainly through it\u0026rsquo;s GUI, Freeview.\nI started using FreeSurfer and Freeview last year and, albeit the documentation being quite thorough, I had a harder time navigating the website than I expected.\nSo here are a few tricks to make your handling FreeSurfer\u0026rsquo;s GUI, Freeview, easier and faster!\n1. Starting Freeview You can start freeview by just typing freeview in your command line and then opening the files you want. Of course, you will be far better off if you write a small script with your usual calls.\nThe command options available for Freeview are:\n   Argument Action     -v load a volume file   -l load a label file   -dti load one or more dti volumes   -f load a surface   -w load waypoints    I have the following script saved under my subjects/ folder:\nexport SUBJECT='\u0026lt;subject name\u0026gt;' freeview -v \\ $SUBJECT/mri/T1.mgz \\ $SUBJECT/mri/wm.mgz \\ $SUBJECT/mri/brainmask.mgz \\ -f \\ $SUBJECT/surf/lh.white:edgecolor=blue \\ $SUBJECT/surf/lh.pial:edgecolor=yellow \\ $SUBJECT/surf/rh.white:edgecolor=blue \\ $SUBJECT/surf/rh.pial:edgecolor=yellow So, if I want to analyze, let\u0026rsquo;s say, subject bert\u0026rsquo;s images, I just open my freeview.sh script with a text editor and change \u0026lt;subject name\u0026gt; to bert (which is this subject\u0026rsquo;s folder name). Then, I can open a terminal, navigate to my subjects/ folder and type:\n./freeview.sh For more information on how to use the freeview command, type:\nfreeview --help You\u0026rsquo;ll get a list of the available sub-options to make the most out of your image visualization!\nAll right, we have opened Freeview and we\u0026rsquo;re ready to start interacting with the GUI!\n2. Check out the available Freeview keyboard shortcuts! This single trick will save you an amazing amount of time. I have been working with CentOs and a few shortcuts I have found by experimenting are:\n   Command Action     Alt + N Navigate Tool   Ctrl + E Recon Edit Tool   Alt + E Voxel Edit Tool   Ctrl + F Toggle all surfaces   Alt + C Alternate between volumes/surfaces   Ctrl + P Toggle left side menu   Ctrl + T Point set edit   Ctrl + R Reset View   Alt + X Show sagital images   Alt + Y Show axial images   Alt + Z Show coronal images   Alt + A/D Decrease/Increase opacity of currently highlighted volume   Ctrl + D Hide brainmask   Alt + F Toggle currently highlighted surface   Alt + U Show cursor    You\u0026rsquo;ll find other shortcuts under this link. I\u0026rsquo;ll copy the most useful ones here for convenience:\n   Command Action     Ctrl + S Save   Ctrl + Z Undo   Ctrl + Q Exit Freeview   Ctrl + O Load Volume   Up/Down Arrow Keys or PageUp/PageDown Change slice   Scroll or Drag-Right-Click Zoom In/Zoom Out   Ctrl + Up/Down/Left/Right (arrow keys) Moving volume (Panning)   Alt + V Toggle currently highlighted volume   Shift-Drag Left Click Adjust Contrast/Brightness   Zoom in at current location Ctrl-Left-Click (or scroll)   Zoom out at current location Ctrl-Right-Click (or scroll)    When you\u0026rsquo;re in Voxel/Recon/ROI edit mode:\n   Command Action     Draw / Fill Left Click   Erase / Erase Fill Shift+Left Click    That concludes this short tutorial about Freeview! If you want to read/know more, the full Freeview Guide can be found here. Also, check out this cool Freeview demo.\n","date":1554023869,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554023869,"objectID":"1ab589724057393495da7910e15b504c","permalink":"https://inespereira.com/post/freeview/","publishdate":"2019-03-31T11:17:49+02:00","relpermalink":"/post/freeview/","section":"post","summary":"FreeSurfer is an open source software package for the analysis and visualization of structural and functional neuroimaging data. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. It\u0026rsquo;s a really useful tool that allows for automated processes as well as manual interventions, mainly through it\u0026rsquo;s GUI, Freeview.\nI started using FreeSurfer and Freeview last year and, albeit the documentation being quite thorough, I had a harder time navigating the website than I expected.","tags":[],"title":"Freeview from FreeSurfer","type":"post"},{"authors":[],"categories":[],"content":"One can sometimes feel very puzzled when watching a physician perform the neurological examination. I mean, what information is there to extract from a retracting big toe, from feet constantly a bit more apart from each other than they should be or even from an absent tendon reflex? How were these signs observed in the first place and how did we come to know how to interpret them?\nLet us focus, for example, on reflexes. A reflex is an involuntary movement in response to a stimulus. Reflexes in general represent a key part of the neurological examination because of their more objective nature and lesser dependency on patient cooperation. Actually, reflexes and their characteristics are crucial: in conjunction with other signs and symptoms and knowledge of the anatomy of the nervous system, the observer can localize the neurological lesion(s) with a surprising degree of precision... before even resorting to CT or MRI imaging!\nDamme there are no pores (William Harvey) The first description of a reflex action was presumably provided by Ren√© Descartes (1596-1650) in his book De homine (1662). Here, he describes an experiment in which a mock blow aimed at a person‚Äôs eyes would lead to prompt eye closure. He conjectured that this response was due to the so-called ‚Äúanimal spirits‚Äù that would travel throughout the body within a hollow nerve tube. Vision, or the sight of the approaching object, was considered a reflection of the animal spirits back to the brain and this is presumed to be where we get the concept of ‚Äúreflex‚Äù: simply the abbreviation of ‚Äúreflection‚Äù. Another example Descartes depicts in his posthumous book is that of a child drawing his (or her...) foot away from a fire. In a very detailed and somewhat oddly mechanistic explanation, Descartes explains how the particles of the fire move the skin of the foot, thereby pulling a string attached on the other end to the pineal gland. This pulling movement opens a pore, thus releasing the animal spirits, that are now free to travel the body to cause the defensive muscle action of retreating the child‚Äôs foot from danger.\nAs bizarre as this pore-based explanation might nowadays sound, Descartes is actually describing the five components of what we call ‚Äúthe reflex arc‚Äù (Figure 1). To build up a reflex arc, we need:\n Receptors, able to detect a signal (for example: pain); A so-called (sensory) ‚Äúafferent arm‚Äù, that carries the transformed signal to‚Ä¶ ‚Ä¶ an integrating center, which, when stimulated, activates‚Ä¶ ‚Ä¶ the (motor) efferent (with an ‚Äúe‚Äù) arm, whose function is to transmit the signal to‚Ä¶ ‚Ä¶ the effector muscle, which will then carry out the involuntary action.  Figure 1: A reflex arc.\nThe relay neuron depicts the integrating center of the reflex arc. It took almost another century and a half for Galvani (1737-1798) to demonstrate, in an anonymous pamphlet, that the animal spirits were actually plain electricity. This caused a reorganization of thinking about how to approach the nervous system: it became more grounded in experiment, but a systematic and organized examination was still lacking. In fact, only until the late 1800s did the generation of Erb, Babinski and Gowers (among others) develop the neurological examination as we know it today.\nTypes of reflexes The most commonly encountered reflexes are the myotatic (tendon) and cutaneous types. Most people are familiar with tendon reflexes (vide the classicVeet wax strips commercial), but rubbing the skin also elicits superficial reflexes. A classic superficial reflex is the plantar reflex, whereby the sole of the foot is stimzulated with a blunt instrument. The reflex can take one of two forms. In healthy adults, the plantar reflex causes flexion of the hallux (aka ‚Äúbig toe‚Äù). An extension of the hallux, however, is known as the Babinski response or Babinski sign (Figure 2).\nFigure 2: The plantar reflex. This response exists as a normal primitive reflex in infants, but indicates lesion to the motor pathway in adults. More specifically, a Babinski response in adults points to a lesion in the first part of the motor pathway (Figure 3), where the upper (or first) motor neuron (of a total of two) lies.\nFigure 3: The motor pathway, also called pyramidal tract. Notice that the first motor neuron (depicted in yellow) extends from the cerebral cortex to the anterior horn of the spinal medulla. A lesion at any point along its long path (due to stroke, for instance) can produce the Babinski response. The Babinski extensor toe response was described by Joseph F√©lix Babinski to the Soci√©t√© de Biologie de Paris on February 22nd 1896. Babinski belonged to the generation that followed the legendary Jean-Marie Charcot. Charcot, a famous neurologist and professor of anatomical-pathology, became known for his m√©thode anatomo-clinique, i.e. careful and systematic correlations between clinical signs and neuropathological lesions. In using this strategy, Charcot succeeded, for instance, in distinguishing the different signs of Parkinson‚Äôs disease. He did not, however, rely much on the physical examination, and it is said that he rarely touched his patients. Babinski met Charcot in a medical competition, where he ended up being awarded a post in the latter‚Äôs service. Babinski hence arrived at the famous H√¥pital de Salp√™tri√®re in 1885, at the height of Charcot‚Äôs career. After his mentor‚Äôs death, Babinski, for political or nonpolitical reasons, distanced himself from Charcot in that he advocated the superior importance of the neurological examination in establishing a clinical diagnosis.\nBut, as I was saying, on February 22nd 1896, two and a half years after Charcot passed away, Babinski presented his ‚Äúnew‚Äù (more on these quotation marks later) sign to a lively crowd of physicians, physiologists, basic scientists and the like. At first, he described the sign as a response to painful stimuli but, in a subsequent communication, added that simply stroking or tickling the sole of the foot could also elicit this same reaction. He further correlated this reflex with a lesion in the pyramidal tract (remember Figure 3) and later included the fanning movement of the other toes in his description (for some wonderful french wordplay: Babinski in the early 20th century press.).\nInterestingly, he also focused on hysteria (a now obsolete diagnosis with a very interesting story to tell), just enough to demonstrate that the presence of the extensor response effectively excludes it. Indeed, although not the first to observe the extensor toe response in pyramidal tract lesions, Babinski is credited for its appropriate interpretation. As a matter of fact, medieval, Renaissance and baroque painters had already correctly represented the extensor toe response in infants.\nFigure 4: The Small Cowper Madonna, Raphael, circa 1505.\nCan you spot the celestial extensor toe? After Babinski‚Äôs first description, a great number of publications withmodified methods to elicit the same extensor response emerged. Among them were Oppenheim (1858‚Äì1919), who proposed to stimulate the tibial surface in a downward movement and Gordon (1874 ‚Äì 1953), who would squeeze the calf muscles of his patients.\nThat‚Äôs interesting, but what should I take home? Aside from being instilled with a few more drops of neurophilia, I hope you now better understand how amazing reflexes actually are. Take a look again at their organized base-structure. Notice that the arc in Figure 1 does not involve the brain‚Äôs outer cortex, and this is true for other non-spinal reflexes. Hence, reflexes are often useful as a way to generate rapid action without the need to involve consciousness. Reflexes are the reason why you ‚Äúautomatically‚Äù remove your hand from a burning pan, why your pupils fastly constrict when exposed to more light, why you salivate when you set your eyes on that oh-so-tasty moussaka.\nIf anything, you are now able to understand some very nerdy references.¬†Until next time!\nList of references:\n Aminoff, M. J.. \"Chapter 16: History of the development of the neurological examination\" Handbook of Clinical Neurology Vol. 95,¬†Elsevier, 2009.¬† Descartes, R.,¬†L‚ÄôHomme de Ren√© Descartes¬†et un¬†Trait√© de la formation du f≈ìtus,¬†Charles Angot, 1664. Goetz, C. G., \"History of the extensor plantar response: Babinski and Chaddock signs.\"¬†Seminars in Neurology, 22(4), 391‚Äì398,¬†2002.¬† Nicholl, D. J., \u0026 Appleton, J. P., \"Clinical neurology: why this still matters in the 21st century.\"¬†Journal of Neurology, Neurosurgery \u0026 Psychiatry, 2015. Patten, B. M., \"The history of the neurological examination . Part 1 : Ancient and pre ‚Äê modern history ‚Äê 3000 BC to AD 1850.\" Journal of the History of the Neurosciences : Basic and Clinical Perspectives, 37‚Äì41, 1992. Steinberg, D. A., \"Scientific neurology and the history of the clinical examination of selected motor cranial nerves.\" Seminars in Neurology, 22(4), 349‚Äì355, 2002. ","date":1522779154,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1522779154,"objectID":"05ce69394b843cf29ac3ba17875291b0","permalink":"https://inespereira.com/post/the-art-of-foot-tickling/","publishdate":"2018-04-03T20:12:34+02:00","relpermalink":"/post/the-art-of-foot-tickling/","section":"post","summary":"One can sometimes feel very puzzled when watching a physician perform the neurological examination. I mean, what information is there to extract from a retracting big toe, from feet constantly a bit more apart from each other than they should be or even from an absent tendon reflex? How were these signs observed in the first place and how did we come to know how to interpret them?\nLet us focus, for example, on reflexes. A reflex is an involuntary movement in response to a stimulus. Reflexes in general represent a key part of the neurological examination because of their more objective nature and lesser dependency on patient cooperation. Actually, reflexes and their characteristics are crucial: in conjunction with other signs and symptoms and knowledge of the anatomy of the nervous system, the observer can localize the neurological lesion(s) with a surprising degree of precision... before even resorting to CT or MRI imaging!\nDamme there are no pores (William Harvey) The first description of a reflex action was presumably provided by Ren√© Descartes (1596-1650) in his book De homine (1662). Here, he describes an experiment in which a mock blow aimed at a person‚Äôs eyes would lead to prompt eye closure. He conjectured that this response was due to the so-called ‚Äúanimal spirits‚Äù that would travel throughout the body within a hollow nerve tube. Vision, or the sight of the approaching object, was considered a reflection of the animal spirits back to the brain and this is presumed to be where we get the concept of ‚Äúreflex‚Äù: simply the abbreviation of ‚Äúreflection‚Äù. Another example Descartes depicts in his posthumous book is that of a child drawing his (or her...) foot away from a fire. In a very detailed and somewhat oddly mechanistic explanation, Descartes explains how the particles of the fire move the skin of the foot, thereby pulling a string attached on the other end to the pineal gland. This pulling movement opens a pore, thus releasing the animal spirits, that are now free to travel the body to cause the defensive muscle action of retreating the child‚Äôs foot from danger.\nAs bizarre as this pore-based explanation might nowadays sound, Descartes is actually describing the five components of what we call ‚Äúthe reflex arc‚Äù (Figure 1). To build up a reflex arc, we need:\n Receptors, able to detect a signal (for example: pain); A so-called (sensory) ‚Äúafferent arm‚Äù, that carries the transformed signal to‚Ä¶ ‚Ä¶ an integrating center, which, when stimulated, activates‚Ä¶ ‚Ä¶ the (motor) efferent (with an ‚Äúe‚Äù) arm, whose function is to transmit the signal to‚Ä¶ ‚Ä¶ the effector muscle, which will then carry out the involuntary action.  Figure 1: A reflex arc.\nThe relay neuron depicts the integrating center of the reflex arc. It took almost another century and a half for Galvani (1737-1798) to demonstrate, in an anonymous pamphlet, that the animal spirits were actually plain electricity. This caused a reorganization of thinking about how to approach the nervous system: it became more grounded in experiment, but a systematic and organized examination was still lacking. In fact, only until the late 1800s did the generation of Erb, Babinski and Gowers (among others) develop the neurological examination as we know it today.\nTypes of reflexes The most commonly encountered reflexes are the myotatic (tendon) and cutaneous types. Most people are familiar with tendon reflexes (vide the classicVeet wax strips commercial), but rubbing the skin also elicits superficial reflexes. A classic superficial reflex is the plantar reflex, whereby the sole of the foot is stimzulated with a blunt instrument. The reflex can take one of two forms. In healthy adults, the plantar reflex causes flexion of the hallux (aka ‚Äúbig toe‚Äù). An extension of the hallux, however, is known as the Babinski response or Babinski sign (Figure 2).\nFigure 2: The plantar reflex. This response exists as a normal primitive reflex in infants, but indicates lesion to the motor pathway in adults. More specifically, a Babinski response in adults points to a lesion in the first part of the motor pathway (Figure 3), where the upper (or first) motor neuron (of a total of two) lies.\nFigure 3: The motor pathway, also called pyramidal tract. Notice that the first motor neuron (depicted in yellow) extends from the cerebral cortex to the anterior horn of the spinal medulla. A lesion at any point along its long path (due to stroke, for instance) can produce the Babinski response. The Babinski extensor toe response was described by Joseph F√©lix Babinski to the Soci√©t√© de Biologie de Paris on February 22nd 1896. Babinski belonged to the generation that followed the legendary Jean-Marie Charcot. Charcot, a famous neurologist and professor of anatomical-pathology, became known for his m√©thode anatomo-clinique, i.e. careful and systematic correlations between clinical signs and neuropathological lesions. In using this strategy, Charcot succeeded, for instance, in distinguishing the different signs of Parkinson‚Äôs disease. He did not, however, rely much on the physical examination, and it is said that he rarely touched his patients. Babinski met Charcot in a medical competition, where he ended up being awarded a post in the latter‚Äôs service. Babinski hence arrived at the famous H√¥pital de Salp√™tri√®re in 1885, at the height of Charcot‚Äôs career. After his mentor‚Äôs death, Babinski, for political or nonpolitical reasons, distanced himself from Charcot in that he advocated the superior importance of the neurological examination in establishing a clinical diagnosis.\nBut, as I was saying, on February 22nd 1896, two and a half years after Charcot passed away, Babinski presented his ‚Äúnew‚Äù (more on these quotation marks later) sign to a lively crowd of physicians, physiologists, basic scientists and the like. At first, he described the sign as a response to painful stimuli but, in a subsequent communication, added that simply stroking or tickling the sole of the foot could also elicit this same reaction. He further correlated this reflex with a lesion in the pyramidal tract (remember Figure 3) and later included the fanning movement of the other toes in his description (for some wonderful french wordplay: Babinski in the early 20th century press.).\nInterestingly, he also focused on hysteria (a now obsolete diagnosis with a very interesting story to tell), just enough to demonstrate that the presence of the extensor response effectively excludes it. Indeed, although not the first to observe the extensor toe response in pyramidal tract lesions, Babinski is credited for its appropriate interpretation. As a matter of fact, medieval, Renaissance and baroque painters had already correctly represented the extensor toe response in infants.\nFigure 4: The Small Cowper Madonna, Raphael, circa 1505.\nCan you spot the celestial extensor toe? After Babinski‚Äôs first description, a great number of publications withmodified methods to elicit the same extensor response emerged. Among them were Oppenheim (1858‚Äì1919), who proposed to stimulate the tibial surface in a downward movement and Gordon (1874 ‚Äì 1953), who would squeeze the calf muscles of his patients.\nThat‚Äôs interesting, but what should I take home? Aside from being instilled with a few more drops of neurophilia, I hope you now better understand how amazing reflexes actually are. Take a look again at their organized base-structure. Notice that the arc in Figure 1 does not involve the brain‚Äôs outer cortex, and this is true for other non-spinal reflexes. Hence, reflexes are often useful as a way to generate rapid action without the need to involve consciousness. Reflexes are the reason why you ‚Äúautomatically‚Äù remove your hand from a burning pan, why your pupils fastly constrict when exposed to more light, why you salivate when you set your eyes on that oh-so-tasty moussaka.\nIf anything, you are now able to understand some very nerdy references.¬†Until next time!\n","tags":[],"title":"The Art of Foot Tickling ","type":"post"}]
